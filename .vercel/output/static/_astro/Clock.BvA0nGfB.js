class r{hour;minute;second;GRADE_HOUR=360/12;GRADE_MINUTE=360/60;HOURS=12;MINUTES=60;gradeSecond=0;gradeMinute=0;gradeHour=0;FPS=1;lastTime=0;requestID=0;counterclockwiseHour=this.createElementDiv("counterclockwise-hour");counterclockwiseMinute=this.createElementDiv("counterclockwise-minute");counterclockwiseSecond=this.createElementDiv("counterclockwise-second");constructor(){const t=new Date;this.hour=t.getHours(),this.minute=t.getMinutes(),this.second=t.getSeconds()}init(){this.lastTime=0,this.requestID=window.requestAnimationFrame(this.loop.bind(this))}loop(t){(t-this.lastTime)/1e3>=1/this.FPS&&(this.updateCounterclockwises(),this.lastTime=t),this.requestID=window.requestAnimationFrame(this.loop.bind(this))}render(){const t=this.createElementDiv("container-clock"),e=this.createElementDiv("clock"),n=this.createElementDiv("center");t.appendChild(e),e.appendChild(n),e.appendChild(this.counterclockwiseHour),e.appendChild(this.counterclockwiseMinute),e.appendChild(this.counterclockwiseSecond);for(let i=1;i<=this.HOURS;i++){const s=this.createHourElement(i);e.appendChild(s)}for(let i=1;i<=this.MINUTES;i++){const s=this.createMinuteElement(i);e.appendChild(s)}return this.initCounterclockwisesTime(),t}initCounterclockwisesTime(){this.gradeSecond=this.second*this.GRADE_MINUTE,this.gradeMinute=this.minute*this.GRADE_MINUTE,this.gradeHour=this.hour*this.GRADE_HOUR+this.GRADE_HOUR/60*this.minute}updateCounterclockwises(){this.hour=this.hour%12||12,this.gradeSecond+=this.GRADE_MINUTE,this.gradeSecond%360===0&&(this.gradeMinute+=this.GRADE_MINUTE,this.gradeHour+=this.GRADE_HOUR/60),this.counterclockwiseHour.style.setProperty("transform",`rotate(${this.gradeHour}deg)`),this.counterclockwiseMinute.style.setProperty("transform",`rotate(${this.gradeMinute}deg)`),this.counterclockwiseSecond.style.setProperty("transform",`rotate(${this.gradeSecond}deg)`)}createMinuteElement(t){const e=this.createElementDiv("container-minute"),n=this.createElementDiv("line-minute");return e.style.transform=`rotate(${t*this.GRADE_MINUTE}deg)`,e.appendChild(n),e}createHourElement(t){const e=this.createElementDiv("container-hour"),n=this.createElementDiv("hour"),i=this.createElementDiv("line-hour");return e.style.transform=`rotate(${t*this.GRADE_HOUR}deg)`,n.style.transform=`rotate(-${t*this.GRADE_HOUR}deg)`,e.appendChild(i),n.innerHTML=t.toString(),e.appendChild(n),e}createElementDiv(t){const e=document.createElement("div");return e.classList.add(t),e}}export{r as AnalogClock};
