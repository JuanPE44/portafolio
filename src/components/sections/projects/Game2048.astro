---
import "@styles/2048.css";
import Header2048 from "./Header2048.astro";
import ComoJugar from "./ComoJugar.astro";
import IconCross from "src/icons/IconCross.astro";
import IconExperience from "src/icons/IconExperience.astro";
---

<>
  <div
    id="contenedor"
    class="flex flex-col sm:flex-row justify-center items-center rounded-2xl gap-4 relative"
  >
    <!--
  <div class="absolute top-0 w-full" id="disable-scroll"></div>
 -->
    <div id="close" class="absolute top-3 right-3 cursor-pointer hidden">
      <IconCross width="25" height="25" className="fill-secondary" />
    </div>

    <div
      class="flex items-center justify-center mx-auto w-full max-w-4xl gap-2 relative"
    >
      <div class="absolute top-0 left-0">
        <IconExperience width="25" height="25" className="fill-secondary " />
      </div>
      <div id="app" class="relative">
        <div
          id="contenedor-jugar"
          class="absolute top-0 rounded-2xl w-full h-full z-50 flex justify-center items-center"
        >
          <button
            id="jugar"
            class="px-8 rounded-2xl py-2 bg-primary text-white text-2xl font-bold"
            >Jugar</button
          >
        </div>
        <div class="container-game flex justify-center gap-5 w-full">
          <div class="board min-h-80 min-w-80"></div>
        </div>
      </div>
    </div>
  </div>
</>

<script>
  // Función para inicializar el juego
  async function loadGame() {
    const { Game } = await import("@utils/2048/Game.ts");
    console.log("Juego cargado");

    const bestScore: number[] = JSON.parse(
      localStorage.getItem("bestScore") ?? "[]"
    );
    localStorage.setItem("bestScore", JSON.stringify(bestScore));

    const g = new Game();
    document
      .querySelector<HTMLDivElement>(".container-game")
      ?.appendChild(g.board.element!);
  }

  // Observador para cargar el juego
  const gameObserver = new IntersectionObserver(
    (entries: IntersectionObserverEntry[], observer: IntersectionObserver) => {
      if (entries[0].isIntersecting) {
        observer.disconnect(); // Detiene la observación después de la primera ejecución
        loadGame();
      }
    },
    { threshold: 0.2 }
  );

  // click boton para jugar
  document
    .querySelector<HTMLButtonElement>("#jugar")
    ?.addEventListener("click", () => {
      // loadGame();
      const contenedor = document.querySelector<HTMLDivElement>("#contenedor");

      contenedor?.classList.remove("rounded-2xl");
      contenedor?.classList.add("fondo-estatico");
      document
        .querySelector<HTMLDivElement>("#contenedor-jugar")
        ?.classList.add("hidden");
    });

  // Función para bloquear las teclas de scroll
  function disableScrollKeys(event: KeyboardEvent) {
    if (["ArrowUp", "ArrowDown", "Space"].includes(event.key)) {
      event.preventDefault();
    }
  }

  // Iniciar observadores
  const appElement = document.getElementById("app");
  if (appElement) gameObserver.observe(appElement);
</script>

<style>
  .fondo-estatico {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    z-index: 100;
    backdrop-filter: blur(15px);
    -webkit-backdrop-filter: blur(15px);
  }
</style>
