---
import type { Feature } from '@data/itemsData';

interface Props {
  feature: Feature;
}

const { feature } = Astro.props;

const colorConfig = {
  blue: {
    gradient: 'from-blue-500 to-blue-600',
    bg: 'from-blue-500/5 to-transparent',
    border: 'hover:border-blue-500/30'
  },
  purple: {
    gradient: 'from-purple-500 to-purple-600',
    bg: 'from-purple-500/5 to-transparent',
    border: 'hover:border-purple-500/30'
  },
  green: {
    gradient: 'from-green-500 to-green-600',
    bg: 'from-green-500/5 to-transparent',
    border: 'hover:border-green-500/30'
  },
  yellow: {
    gradient: 'from-yellow-500 to-yellow-600',
    bg: 'from-yellow-500/5 to-transparent',
    border: 'hover:border-yellow-500/30'
  },
  red: {
    gradient: 'from-red-500 to-red-600',
    bg: 'from-red-500/5 to-transparent',
    border: 'hover:border-red-500/30'
  },
  indigo: {
    gradient: 'from-indigo-500 to-indigo-600',
    bg: 'from-indigo-500/5 to-transparent',
    border: 'hover:border-indigo-500/30'
  }
};

const colors = colorConfig[feature.color];
---

<div class={`group bg-gray-bg border border-gray-600 rounded-2xl p-6 backdrop-blur-sm ${colors.border} transition-all duration-300 relative overflow-hidden`}>
  <div class={`absolute inset-0 bg-gradient-to-br ${colors.bg} opacity-0 group-hover:opacity-100 transition-opacity duration-300`}></div>
  <div class={`w-14 h-14 bg-gradient-to-br ${colors.gradient} rounded-xl flex items-center justify-center text-white mb-4 group-hover:scale-110 transition-transform relative z-10`}>
    <svg class="w-7 h-7" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d={feature.icon}/>
    </svg>
  </div>
  <h3 class="text-lg font-semibold text-white mb-2 relative z-10">{feature.title}</h3>
  <p class="text-gray-300 relative z-10">{feature.description}</p>
</div>
